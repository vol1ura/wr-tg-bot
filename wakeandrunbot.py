import logging
import os
import random
import re
import time

import telebot
from dotenv import load_dotenv
from geopy.geocoders import Nominatim
# https://api.telegram.org/{TOKEN}/getMe
from telebot import types

from utils import content, vk, instagram, weather, parkrun, news, fucomp, search

dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

TOKEN_BOT = os.environ.get('API_BOT_TOKEN')
bot = telebot.TeleBot(TOKEN_BOT)
logger = telebot.logger
telebot.logger.setLevel(logging.WARNING)  # Outputs WARNING messages to log and console.


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, content.start_message, disable_notification=True)


@bot.message_handler(commands=['about', '–æ–±–æ—Ç–µ'])
@bot.message_handler(regexp=r'(?i)^–±–æ—Ç\b(?=.*–æ —Å–µ–±–µ)', content_types=['text'])
def about(message):
    bot.send_message(message.chat.id, content.about_message,
                     disable_notification=True, parse_mode='html', disable_web_page_preview=True)


@bot.message_handler(commands=['admin', '–∞–¥–º–∏–Ω'])
@bot.message_handler(func=lambda message: fucomp.bot_compare(message.text, fucomp.phrases_admin))
def admin(message):
    if message.chat.type == "private":  # private chat message
        bot.send_message(message.chat.id, '–ó–¥–µ—Å—å –Ω–µ—Ç –∞–¥–º–∏–Ω–æ–≤, –º—ã –≤—Å–µ —Ä–∞–≤–Ω—ã.')
    else:
        admin = random.choice(bot.get_chat_administrators(message.chat.id)).user.to_dict()
        about_admin = f"\n–ê–¥–º–∏–Ω @{admin['username']} - {admin['first_name']}  {admin['last_name']}"
        bot.send_message(message.chat.id, random.choice(content.phrases_about_admin) + about_admin)


@bot.message_handler(commands=['social', '—Å–æ—Ü—Å–µ—Ç–∏'])
@bot.message_handler(func=lambda message: fucomp.bot_compare(message.text, fucomp.phrases_social))
def social(message):
    bot.send_message(message.chat.id, content.about_social,
                     parse_mode='MarkdownV2', disable_web_page_preview=True, disable_notification=True)


@bot.message_handler(commands=['schedule', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'])
@bot.message_handler(func=lambda message: fucomp.bot_compare(message.text, fucomp.phrases_schedule))
def schedule(message):
    bot.send_message(message.chat.id, content.about_training,
                     parse_mode='MarkdownV2', disable_web_page_preview=True, disable_notification=True)


@bot.message_handler(commands=['help', '–ø–æ–º–æ—â—å', '–∫–æ–º–∞–Ω–¥—ã', '—Å–ø—Ä–∞–≤–∫–∞'])
def commands(message):
    bot_nick = bot.get_me().to_dict()["username"]
    bot.send_message(message.chat.id, f"""–Ø –ø–æ–Ω–∏–º–∞—é —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
    üìÜ /schedule, /—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    üì± /social, /—Å–æ—Ü—Å–µ—Ç–∏ - Wake&Run –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö
    üë§ /admin, /–∞–¥–º–∏–Ω - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞
    ü§ñ /about, /–æ–±–æ—Ç–µ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    ‚ùì /help, /–ø–æ–º–æ—â—å, /—Å–ø—Ä–∞–≤–∫–∞, /–∫–æ–º–∞–Ω–¥—ã - _–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ_
    –ï—Å—Ç—å *inline* —Ä–µ–∂–∏–º –∑–∞–ø—Ä–æ—Å–æ–≤ - –Ω–∞–±–µ—Ä–∏—Ç–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è @{bot_nick} <–∑–∞–ø—Ä–æ—Å> (–ø—Ä–∏–º–µ—Ä—ã):
    @{bot_nick} –ø–æ–≥–æ–¥–∞
    @{bot_nick} –ø–∞—Ä–∫—Ä–∞–Ω
    @{bot_nick} –≤–æ–∑–¥—É—Ö
    @{bot_nick} —Å—Ç–∞—Ä—Ç—ã
    –ß–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –ø–æ—è–≤–∏—Ç—Å—è –º–µ–Ω—é, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    –ü—Ä–æ –ø–æ–≥–æ–¥—É –∏ –≤–æ–∑–¥—É—Ö –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —Å–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, _–ë–æ—Ç, –ø–æ–≥–æ–¥–∞ –ú–æ—Å–∫–≤–∞ –ö—É–∑—å–º–∏–Ω–∫–∏_, –ª–∏–±–æ 
    _–ë–æ—Ç, –≤–æ–∑–¥—É—Ö –ö–∏—Å–ª–æ–≤–æ–¥—Å–∫_.
    –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ _–ë–æ—Ç, –ø–∞—Ä–∫—Ä–∞–Ω –§–∞–º–∏–ª–∏—è_, –±–æ—Ç –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ñ–∞–º–∏–ª–∏–µ–π –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º
    –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –≤ —Å–∏—Å—Ç–µ–º—É –ø–∞—Ä–∫—Ä–∞–Ω–µ –ö—É–∑—å–º–∏–Ω–∫–∏. –ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ä—ã –Ω–∞–ø–æ–ª–∑–∞—é—Ç –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞, –º–æ–∂–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞–¥–ø–∏—Å—å, 
    —É–∫–∞–∑–∞–≤ —Ü–µ–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–¥—É—Å–æ–≤ –ø–æ–≤–æ—Ä–æ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, _–ë–æ—Ç, –ø–∞—Ä–∫—Ä–∞–Ω –§–∞–º–∏–ª–∏—è 45_ - –Ω–∞–¥–ø–∏—Å–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ 45¬∞.
    –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è _–ë–æ—Ç –ø–∞—Ä–∫—Ä–∞–Ω_,  _–ë–æ—Ç, –∏–Ω—Å—Ç–∞–≥—Ä–∞–º_, –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏.
    –ë–æ—Ç _–Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω_ –∫ –∑–Ω–∞–∫–∞–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏, —Ä–µ–≥–∏—Å—Ç—Ä—É –±—É–∫–≤, –∏, –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤, –∫ –ø–æ—Ä—è–¥–∫—É —Ñ—Ä–∞–∑. 
    –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —Å –±–æ—Ç–æ–º –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å–ª–æ–≤–æ–º *–±–æ—Ç*.""",
                     disable_notification=True, parse_mode='Markdown')


@bot.message_handler(regexp=r'(?i)–±–æ—Ç,? (?:–ø–æ–∫–∞–∂–∏ )?(–ø–æ–≥–æ–¥\w|–≤–æ–∑–¥—É—Ö)( \w+,?){1,3}$')
def ask_weather(message):
    match = re.search(r'–±–æ—Ç,? (?:–ø–æ–∫–∞–∂–∏ )?(–ø–æ–≥–æ–¥\w|–≤–æ–∑–¥—É—Ö) ([\w, ]+)', message.text, re.I)
    if match:
        place = re.sub(r' –≤\b', '', match.group(2).strip())
        app = Nominatim(user_agent="wr-tg-bot")
        try:
            location = app.geocode(place).raw
        except AttributeError:
            return bot.reply_to(message, '–ï—Å—Ç—å —Ç–∞–∫–æ–π –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç? ...–Ω–µ –∑–Ω–∞—é. –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '
                                         '"–ë–æ—Ç, –ø–æ–≥–æ–¥–∞ –ì–æ—Ä–æ–¥" –∏–ª–∏ "–ë–æ—Ç, –≤–æ–∑–¥—É—Ö –ù–∞–∑–≤–∞–Ω–∏–µ –û–±–ª–∞—Å—Ç—å".')
        if match.group(1).startswith('–ø–æ–≥–æ–¥'):
            bot.send_chat_action(message.chat.id, 'typing')
            bot.send_message(message.chat.id, weather.get_weather(place, location['lat'], location['lon']))
        else:
            bot.send_chat_action(message.chat.id, 'typing')
            bot.send_message(message.chat.id, weather.get_air_quality(place, location['lat'], location['lon'])[1])


@bot.inline_handler(lambda query: '–ø–æ–≥–æ–¥–∞' in query.query)
def query_weather(inline_query):
    try:
        places_weather = [types.InlineQueryResultArticle(
            f'{k}', k, description='–ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å',
            input_message_content=types.InputTextMessageContent(weather.get_weather(k, v.lat, v.lon)))
            for k, v in content.places.items()]
        bot.answer_inline_query(inline_query.id, places_weather, cache_time=3000)
    except Exception as e:
        logger.error(e)


@bot.inline_handler(lambda query: '–≤–æ–∑–¥—É—Ö' in query.query)
def query_air(inline_query):
    try:
        places_air = [types.InlineQueryResultArticle(
            f'{k}', k, description='–∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞',
            input_message_content=types.InputTextMessageContent(weather.get_air_quality(k, v.lat, v.lon)[1]))
            for k, v in content.places.items()]
        bot.answer_inline_query(inline_query.id, places_air, cache_time=3000)
    except Exception as e:
        logger.error(e)


@bot.inline_handler(lambda query: '–ø–∞—Ä–∫—Ä–∞–Ω' in query.query or 'parkrun' in query.query)
def query_parkrun(inline_query):
    try:
        pattern = '‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö '
        m1 = types.InlineQueryResultArticle(
            f'{1}', '–ì–¥–µ –±–µ–≥–∞–ª–∏ –Ω–∞—à–∏ –æ–¥–Ω–æ–∫–ª—É–±–Ω–∏–∫–∏?', description='–ø–µ—Ä–µ—á–µ–Ω—å –ø–∞—Ä–∫—Ä–∞–Ω–æ–≤',
            input_message_content=types.InputTextMessageContent(pattern + '–æ–± —É—á–∞—Å—Ç–∏–∏...'),
            thumb_url='https://raw.githubusercontent.com/vol1ura/wr-tg-bot/master/static/pics/1.jpg',
            thumb_width=48, thumb_height=48)
        m2 = types.InlineQueryResultArticle(
            f'{2}', '–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—à –∫–ª—É–± –≤ parkrun?', description='—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª—É–± Wake&Run',
            input_message_content=types.InputTextMessageContent(parkrun.club_link,
                                                                parse_mode='Markdown', disable_web_page_preview=True),
            thumb_url='https://raw.githubusercontent.com/vol1ura/wr-tg-bot/master/static/pics/2.jpg',
            thumb_width=48, thumb_height=48)
        m3 = types.InlineQueryResultArticle(
            f'{3}', '–¢–æ–ø 10 –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤', description='–Ω–∞ –ø–∞—Ä–∫—Ä–∞–Ω–µ –ö—É–∑—å–º–∏–Ω–∫–∏',
            input_message_content=types.InputTextMessageContent(pattern + '–æ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞—Ö.', parse_mode='Markdown'),
            thumb_url='https://raw.githubusercontent.com/vol1ura/wr-tg-bot/master/static/pics/3.jpg',
            thumb_width=48, thumb_height=48)
        m4 = types.InlineQueryResultArticle(
            f'{4}', '–¢–æ–ø 10 –æ–¥–Ω–æ–∫–ª—É–±–Ω–∏–∫–æ–≤ –ø–æ —á–∏—Å–ª—É –∑–∞–±–µ–≥–æ–≤', description='–Ω–∞ –ø–∞—Ä–∫—Ä–∞–Ω–µ –ö—É–∑—å–º–∏–Ω–∫–∏',
            input_message_content=types.InputTextMessageContent(pattern + '–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç–∞—Ä—Ç–æ–≤ –≤ –ö—É–∑—å–º–∏–Ω–∫–∞—Ö...'),
            thumb_url='https://raw.githubusercontent.com/vol1ura/wr-tg-bot/master/static/pics/4.jpg',
            thumb_width=48, thumb_height=48)
        m5 = types.InlineQueryResultArticle(
            f'{5}', '–¢–æ–ø 10 –æ–¥–Ω–æ–∫–ª—É–±–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–∞—Ä–∫—Ä–∞–Ω–æ–≤', description='–ø–æ –≤—Å–µ–º –ø–∞—Ä–∫—Ä–∞–Ω–∞–º',
            input_message_content=types.InputTextMessageContent(pattern + '–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤—Å–µ—Ö —Å—Ç–∞—Ä—Ç–æ–≤...'),
            thumb_url='https://raw.githubusercontent.com/vol1ura/wr-tg-bot/master/static/pics/5.jpg',
            thumb_width=48, thumb_height=48)
        m6 = types.InlineQueryResultArticle(
            f'{6}', '–¢–æ–ø 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–¥–Ω–æ–∫–ª—É–±–Ω–∏–∫–æ–≤', description='–Ω–∞ –ø–∞—Ä–∫—Ä–∞–Ω–µ –ö—É–∑—å–º–∏–Ω–∫–∏',
            input_message_content=types.InputTextMessageContent(pattern + '–æ —Ä–µ–∫–æ—Ä–¥–∞—Ö...'),
            thumb_url='https://raw.githubusercontent.com/vol1ura/wr-tg-bot/master/static/pics/6.jpg',
            thumb_width=48, thumb_height=48)
        m7 = types.InlineQueryResultArticle(
            f'{7}', '–°–∞–º—ã–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∫—Ä–∞–Ω—ã –†–æ—Å—Å–∏–∏', description='–ø–æ –º—É–∂—Å–∫–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º',
            input_message_content=types.InputTextMessageContent(pattern + '–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø–∞—Ä–∫—Ä–∞–Ω–∞—Ö'),
            thumb_url='https://raw.githubusercontent.com/vol1ura/wr-tg-bot/master/static/pics/7.jpg',
            thumb_width=48, thumb_height=48)
        m8 = types.InlineQueryResultArticle(
            f'{8}', '–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏', description='–Ω–∞ –ø–∞—Ä–∫—Ä–∞–Ω–µ –ö—É–∑—å–º–∏–Ω–∫–∏',
            input_message_content=types.InputTextMessageContent(pattern + '–∏ —Ä–∞—Å—á—ë—Ç –¥–∏–∞–≥—Ä–∞–º–º—ã...'),
            thumb_url='https://raw.githubusercontent.com/vol1ura/wr-tg-bot/master/static/pics/8.jpg',
            thumb_width=48, thumb_height=48)
        m9 = types.InlineQueryResultArticle(
            f'{9}', '–î–∏–∞–≥—Ä–∞–º–º–∞ —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –∫–ª—É–±–∞–º', description='–Ω–∞ –ø–∞—Ä–∫—Ä–∞–Ω–µ –ö—É–∑—å–º–∏–Ω–∫–∏',
            input_message_content=types.InputTextMessageContent(pattern + '–æ –∫–ª—É–±–∞—Ö...'),
            thumb_url='https://raw.githubusercontent.com/vol1ura/wr-tg-bot/master/static/pics/9.jpg',
            thumb_width=48, thumb_height=48)
        bot.answer_inline_query(inline_query.id, [m1, m3, m8, m9, m4, m5, m6, m7, m2], cache_time=36000)
    except Exception as e:
        logger.error(e)


@bot.message_handler(regexp='‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö', content_types=['text'])
def post_parkrun_info(message):
    bot.send_chat_action(message.chat.id, 'typing')
    if '–æ–± —É—á–∞—Å—Ç–∏–∏' in message.text:
        bot.send_message(message.chat.id,
                         parkrun.get_participants(),
                         parse_mode='Markdown',
                         disable_web_page_preview=True)
    elif '–¥–∏–∞–≥—Ä–∞–º–º—ã' in message.text:
        pic = parkrun.make_latest_results_diagram('results.png')
        if os.path.exists("results.png"):
            bot.send_photo(message.chat.id, pic)
            pic.close()
        else:
            logger.error('File results.png not found! Or the picture wasn\'t generated.')
    elif '–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç–∞—Ä—Ç–æ–≤ –≤ –ö—É–∑—å–º–∏–Ω–∫–∞—Ö' in message.text:
        bot.send_message(message.chat.id, parkrun.get_kuzminki_fans(), parse_mode='Markdown')
    elif '–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤—Å–µ—Ö —Å—Ç–∞—Ä—Ç–æ–≤' in message.text:
        bot.send_message(message.chat.id, parkrun.get_wr_purkruners(), parse_mode='Markdown')
    elif '–æ —Ä–µ–∫–æ—Ä–¥–∞—Ö' in message.text:
        bot.send_message(message.chat.id, parkrun.get_kuzminki_top_results(), parse_mode='Markdown')
    elif '–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø–∞—Ä–∫—Ä–∞–Ω–∞—Ö' in message.text:
        bot.send_message(message.chat.id, parkrun.most_slow_parkruns(), parse_mode='Markdown')
    elif '–æ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞—Ö' in message.text:
        bot.send_message(message.chat.id, parkrun.get_volunteers(), parse_mode='Markdown')
    elif '–æ –∫–ª—É–±–∞—Ö...' in message.text:
        pic = parkrun.make_clubs_bar('clubs.png')
        if os.path.exists("clubs.png"):
            bot.send_photo(message.chat.id, pic)
            pic.close()
        else:
            logger.error('File clubs.png not found! Or the picture wasn\'t generated.')

    bot.delete_message(message.chat.id, message.id)


@bot.inline_handler(lambda query: re.search(r'—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω|—Å—Ç–∞—Ä—Ç|–∑–∞–±–µ–≥|competition|event', query.query))
def query_competitions(inline_query):
    try:
        date = time.gmtime(time.time())
        month, year = date.tm_mon, date.tm_year
        competitions = news.get_competitions(month, year)
        logger.info(str(len(competitions)))
        if len(competitions) < 10:
            if month == 12:
                month = 1
                year += 1
            else:
                month += 1
            competitions += news.get_competitions(month, year)
        queries = [types.InlineQueryResultArticle(
            '111', 'Google-—Ç–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ä—Ç–æ–≤ –∏ –æ–¥–Ω–æ–∫–ª—É–±–Ω–∏–∫–æ–≤', description='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É',
            input_message_content=types.InputTextMessageContent(news.club_calendar(), parse_mode='html'))]
        for i, comp in enumerate(competitions, 1):
            queries.append(types.InlineQueryResultArticle(
                str(i), comp[0], description=comp[1],
                input_message_content=types.InputTextMessageContent(comp[2], parse_mode='html')))
        bot.answer_inline_query(inline_query.id, queries, cache_time=30000)
    except Exception as e:
        logger.error(e)


@bot.message_handler(regexp=r'(?i)–±–æ—Ç[, \w]+?(–ø–∞—Ä–∫—Ä–∞–Ω\w?|parkrun)( \w+){1,3}( \d+)?$')
def parkrun_personal_result(message):
    bot.send_chat_action(message.chat.id, 'typing')
    try:
        turn = re.search(r'\d+$', message.text)
        turn = int(turn[0]) % 360 if turn else 0
        person = re.sub(r'.*(–ø–∞—Ä–∫—Ä–∞–Ω\w?|parkrun) ', '', message.text)
        person = re.sub(r'\d', '', person).strip()
        pic = parkrun.make_latest_results_diagram('results.png', person, turn)
        bot.send_photo(message.chat.id, pic)
        pic.close()
    except:
        logger.error(f'Attempt to generate personal diagram failed. Query: {message.text}')
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∏–º—è.')


@bot.message_handler(regexp=r'(?i)–±–æ—Ç,? (–ø–∞—Ä–∫—Ä–∞–Ω|parkrun)', content_types=['text'])
def get_parkrun_picture(message):
    token = os.environ.get('VK_SERVICE_TOKEN')
    bot.send_photo(message.chat.id, vk.get_random_photo(token), disable_notification=True)


@bot.message_handler(func=lambda message: fucomp.bot_compare(message.text, fucomp.phrases_instagram))
def get_instagram_post(message):
    login = os.environ.get('IG_USERNAME')
    password = os.environ.get('IG_PASSWORD')
    user = random.choice(content.instagram_profiles)
    wait_message = bot.reply_to(message, '–°–µ–π—á–∞—Å —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–∞–π–¥—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...', disable_notification=True)
    ig_post = instagram.get_last_post(login, password, user)
    bot.send_photo(message.chat.id, *ig_post, disable_notification=True)
    bot.delete_message(wait_message.chat.id, wait_message.id)


@bot.message_handler(regexp=r'(?i)^–±–æ—Ç\b', content_types=['text'])
def simple_answers(message):
    ans = []
    if '–∫–∞–∫' in message.text and re.search(r'\b–¥–µ–ª–∞\b|–∂–∏–∑–Ω—å|\b—Å–∞–º\b|–ø–æ–∂–∏–≤–∞–µ—à—å', message.text, re.I):
        ans = content.phrases_about_myself
    elif re.search(r'–ø—Ä–∏–≤–µ—Ç|\bhi\b|hello|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', message.text, re.I):
        user = message.from_user.first_name
        ans = [s.format(user) for s in content.greeting]
    elif fucomp.bot_compare(message.text, fucomp.phrases_parkrun):
        ans = content.phrases_about_parkrun

    if ans:
        bot.reply_to(message, random.choice(ans), disable_web_page_preview=True)
        return
    elif '–ø–æ–≥–æ–¥–∞' in message.text:
        bot_nick = bot.get_me().to_dict()["username"]
        ans = [f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ inline –∑–∞–ø—Ä–æ—Å: –≤ —Å—Ç—Ä–æ–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–±–µ—Ä–∏—Ç–µ "@{bot_nick} –ø–æ–≥–æ–¥–∞".'
               '–õ–∏–±–æ, –Ω–∞–±—Ä–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ, "–ë–æ—Ç, –ø–æ–≥–æ–¥–∞ –ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç", –Ω–∞–ø—Ä–∏–º–µ—Ä, "–ë–æ—Ç, –ø–æ–≥–æ–¥–∞ –ö—É–∑—å–º–∏–Ω–∫–∏ –ú–æ—Å–∫–≤–∞".']
    elif re.search(r'GRUT|–ì–†–£–¢', message.text, re.I):
        ans = content.phrases_grut
    elif re.search(r'\b–≥—Ä–µ—á–∫|\b–≥—Ä–µ—á–Ω–µ–≤–∞—è', message.text, re.I):
        ans = content.phrases_grechka
    else:
        bot.send_chat_action(message.chat.id, 'typing')
        ans_variant = random.randrange(3)
        if ans_variant == 0:
            ans = [search.google(message.text)]
            if not ans[0]:
                ans = [random.choice(content.phrases_about_running)]
        elif ans_variant == 1:
            ans = [fucomp.best_answer(message.text, fucomp.message_base_wr)]
        else:
            ans = [fucomp.best_answer(message.text, fucomp.message_base_m)]
    bot.send_message(message.chat.id, random.choice(ans), disable_web_page_preview=True, disable_notification=True)


if __name__ == '__main__':
    # print(os.environ.get('API_BOT_TOKEN'))
    # bot.remove_webhook()
    bot.polling(none_stop=True)
