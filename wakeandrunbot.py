import logging
import os
import random
import re
import time

from dotenv import load_dotenv

import telebot
# https://api.telegram.org/{TOKEN}/getMe
from telebot import types

from utils import content, vk, instagram, weather
from utils.news import get_competitions

dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

TOKEN_BOT = os.environ.get('API_BOT_TOKEN')
bot = telebot.TeleBot(TOKEN_BOT)
logger = telebot.logger
telebot.logger.setLevel(logging.WARNING)  # Outputs debug messages to console.

# if message.chat.type == "private":
# 	# private chat message
#
# if message.chat.type == "group":
# 	# group chat message
#
# if message.chat.type == "supergroup":
# 	# supergroup chat message
#
# if message.chat.type == "channel":
# 	# channel message


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, content.start_message, disable_notification=True)


@bot.message_handler(commands=['about', '–æ–±–æ—Ç–µ'])
@bot.message_handler(regexp=r'(?i)\b–±–æ—Ç\b(?=.*–æ —Å–µ–±–µ)', content_types=['text'])
def about(message):
    bot.send_message(message.chat.id, content.about_message, disable_notification=True)


@bot.message_handler(commands=['admin', '–∞–¥–º–∏–Ω'])
@bot.message_handler(regexp=r'(?i)\b–±–æ—Ç\b(?=.*(?:—Ç—É—Ç –≥–ª–∞–≤–Ω—ã–π|\b–∞–¥–º–∏–Ω))', content_types=['text'])
def admin(message):
    admin = random.choice(bot.get_chat_administrators(message.chat.id)).user.to_dict()
    about_admin = f"\n–ê–¥–º–∏–Ω @{admin['username']} - {admin['first_name']}  {admin['last_name']}"
    bot.send_message(message.chat.id, random.choice(content.phrases_about_admin) + about_admin, parse_mode=None)


@bot.message_handler(commands=['social', '—Å–æ—Ü—Å–µ—Ç–∏'])
@bot.message_handler(regexp=r'(?i)\b—Å—Å—ã–ª–∫\B|\b—Å–æ—Ü—Å–µ—Ç\B|–æ –∫–ª—É–±–µ', content_types=['text'])
def social(message):
    bot.send_message(message.chat.id, content.about_social,
                     parse_mode='MarkdownV2', disable_web_page_preview=True, disable_notification=True)


@bot.message_handler(commands=['shedule', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'])
@bot.message_handler(regexp=r'(?i)\b—Ä–∞—Å–ø–∏—Å–∞–Ω–∏\B|–∫–æ–≥–¥–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫\B', content_types=['text'])
def shedule(message):
    bot.send_message(message.chat.id, content.about_training,
                     parse_mode='MarkdownV2', disable_web_page_preview=True, disable_notification=True)


@bot.message_handler(commands=['help', '–ø–æ–º–æ—â—å', '–∫–æ–º–∞–Ω–¥—ã', '—Å–ø—Ä–∞–≤–∫–∞'])
def commands(message):
    bot.send_message(message.chat.id, """–Ø –ø–æ–Ω–∏–º–∞—é —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
    üìÜ /schedule, /—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    üì± /social, /—Å–æ—Ü—Å–µ—Ç–∏ - Wake&Run –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö
    üë§ /admin, /–∞–¥–º–∏–Ω - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞
    ü§ñ /about, /–æ–±–æ—Ç–µ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    ‚ùì /help, /–ø–æ–º–æ—â—å, /—Å–ø—Ä–∞–≤–∫–∞, /–∫–æ–º–∞–Ω–¥—ã - –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    –ï—Å—Ç—å inline —Ä–µ–∂–∏–º –∑–∞–ø—Ä–æ—Å–æ–≤.
    –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —Å–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å.""", disable_notification=True)
    # markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, one_time_keyboard=True)
    # itembtn1 = types.KeyboardButton('üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    # itembtn2 = types.KeyboardButton('üì± –°–æ—Ü—Å–µ—Ç–∏ –∫–ª—É–±–∞')
    # itembtn3 = types.KeyboardButton('üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
    # itembtn4 = types.KeyboardButton('ü§ñ –û –±–æ—Ç–µ')
    # markup.add(itembtn1, itembtn2, itembtn3, itembtn4)


@bot.message_handler(regexp=r'(?i)\b–±–æ—Ç\b(?=.*(?:–ø–æ–±–µ–≥–∞—Ç—å|–∫–∞–∫ –Ω–∞ —É–ª–∏—Ü–µ|–≤–æ–∑–¥—É—Ö))', content_types=['text'])
def ask_weather_or_air(message):
    place = '–ö—É–∑—å–º–∏–Ω–∫–∏'
    aq = weather.get_air_quality(place, content.places[place].lat, content.places[place].lon)
    if aq[0] > 3:
        bot.reply_to(message, '–ï—Å–ª–∏ –≤—ã —Å –ú–æ—Å–∫–≤–µ, —Ç–æ –∫—Ä–∞–π–Ω–µ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–µ–π—á–∞—Å –±–µ–≥–∞—Ç—å, '
                              '–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è –≤–æ–∑–¥—É—Ö–∞ –≤—ã—Å–æ–∫–∏–µ. –õ—É—á—à–µ –ø–æ–ø–æ–∑–∂–µ.')
    elif time.gmtime(time.time()).tm_wday == 3 and time.gmtime(time.time()).tm_hour < 20:
        bot.reply_to(message, '–°–µ–≥–æ–¥–Ω—è –∂ —á–µ—Ç–≤–µ—Ä–≥–æ–≤–∞—è, –ø—Ä–∏—Ö–æ–¥–∏ –∏ –±–µ–≥–∞–π! '
                              '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /shedule')
    elif time.gmtime(time.time()).tm_wday == 6 and time.gmtime(time.time()).tm_hour < 9:
        bot.reply_to(message, '–°–µ–≥–æ–¥–Ω—è –∂ –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –≤ –ø–∞—Ä–∫–µ, –ø—Ä–∏—Ö–æ–¥–∏ –∏ –±–µ–≥–∞–π! '
                              '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /shedule')
    elif time.gmtime(time.time()).tm_wday == 1 and time.gmtime(time.time()).tm_hour < 19:
        bot.reply_to(message, '–°–µ–≥–æ–¥–Ω—è –∂ –≥–æ—Ä–æ–¥—Å–∫–∞—è –ø—Ä–æ–±–µ–∂–∫–∞, –ø—Ä–∏—Ö–æ–¥–∏! '
                              '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /shedule')
    else:
        bot.reply_to(message, random.choice(content.phrases_about_running))


@bot.inline_handler(lambda query: query.query == '–ø–æ–≥–æ–¥–∞')
def query_text(inline_query):
    try:
        places_weather = [types.InlineQueryResultArticle(
            f'{k}', k, description='–ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å',
            input_message_content=types.InputTextMessageContent(weather.get_weather(k, v.lat, v.lon)))
            for k, v in content.places.items()]
        bot.answer_inline_query(inline_query.id, places_weather, cache_time=3000)
    except Exception as e:
        print(e)


@bot.inline_handler(lambda query: query.query == '–≤–æ–∑–¥—É—Ö')
def query_text(inline_query):
    try:
        places_air = [types.InlineQueryResultArticle(
            f'{k}', k, description='–∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞',
            input_message_content=types.InputTextMessageContent(weather.get_air_quality(k, v.lat, v.lon)[1]))
            for k, v in content.places.items()]
        bot.answer_inline_query(inline_query.id, places_air, cache_time=3000)
    except Exception as e:
        print(e)


@bot.inline_handler(lambda query: re.search(r'—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω|—Å—Ç–∞—Ä—Ç|–∑–∞–±–µ–≥', query.query))
def inline_competitions(inline_query):
    try:
        date = time.gmtime(time.time())
        month, year = date.tm_mon, date.tm_year
        competitions = get_competitions(month, year)
        print(len(competitions))
        if len(competitions) < 10:
            if month == 12:
                month = 1
                year += 1
            else:
                month += 1
            competitions += get_competitions(month, year)

        queries = []
        for i, comp in enumerate(competitions, 1):
            queries.append(types.InlineQueryResultArticle(
                str(i), comp[0], description=comp[1],
                input_message_content=types.InputTextMessageContent(comp[2], parse_mode='html')))
        bot.answer_inline_query(inline_query.id, queries, cache_time=600000)
    except Exception as e:
        print(e)


@bot.message_handler(regexp=r'(?i)–±–æ—Ç (–ø–∞—Ä–∫—Ä–∞–Ω|parkrun)', content_types=['text'])
def parkrun(message):
    token = os.environ.get('VK_SERVICE_TOKEN')
    bot.send_photo(message.chat.id, vk.get_random_photo(token), disable_notification=True)


@bot.message_handler(regexp=r'(?i)–±–æ—Ç (\b–∏–Ω—Å—Ç–∞–≥—Ä–∞–º|instagram)', content_types=['text'])
def get_instagram_post(message):
    login = os.environ.get('IG_USERNAME')
    password = os.environ.get('IG_PASSWORD')
    user = random.choice(content.instagram_profiles)
    # wait_message = bot.reply_to(message, '–°–µ–π—á–∞—Å —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–∞–π–¥—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...', disable_notification=True)
    bot.send_chat_action(message.chat.id, '–°–µ–π—á–∞—Å –Ω–∞–π–¥—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')  # TODO: test this feature!!!
    ig_post = instagram.get_last_post(login, password, user)
    bot.send_photo(message.chat.id, *ig_post, disable_notification=True)
    # bot.delete_message(wait_message.chat.id, wait_message.id)  # TODO remove after success testing


@bot.message_handler(regexp=r'(?i)\b–±–æ—Ç\b', content_types=['text'])
def simple_answers(message):
    ans = []
    if '–∫–∞–∫' in message.text and re.search('–¥–µ–ª|–∂–∏–∑–Ω—å|—Å–∞–º|–ø–æ–∂–∏–≤–∞–µ—à—å', message.text, re.I):
        ans = content.phrases_about_myself
    elif re.search('–ø—Ä–∏–≤–µ—Ç|hi|hello|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', message.text, re.I):
        user = message.from_user.first_name
        ans = [s.format(user) for s in content.greeting]
    elif re.search(r'\b—Ä–∞—Å—Å–∫–∞\B', message.text) and re.search('–ø–∞—Ä–∫—Ä–∞–Ω|parkrun', message.text, re.I):
        ans = content.phrases_about_parkrun
    if ans:
        bot.reply_to(message, random.choice(ans), disable_web_page_preview=True)
        return

    elif '—Ç–æ–ø —Å—Ç—Ä–∞–≤—ã' in message.text:
        ans = ['–¢–µ–∫—Å—Ç-----------------------------------------']
    elif '–ø–æ–≥–æ–¥–∞' in message.text:
        ans = ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ –æ –ø–æ–≥–æ–¥–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ inline –∑–∞–ø—Ä–æ—Å: –≤ —Å—Ç—Ä–æ–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–±–µ—Ä–∏—Ç–µ "@–∏–º—è–±–æ—Ç–∞ –ø–æ–≥–æ–¥–∞"']
    elif re.search(r'\b—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫', message.text):
        ans = [content.about_training]
    else:
        ans = content.phrases_about_running
    bot.send_message(message.chat.id, random.choice(ans), disable_web_page_preview=True)


# if __name__ == '__main__':
    # bot.remove_webhook()
    # bot.polling(none_stop=True)
