import logging
import os
import random
import re
import time
from geopy.geocoders import Nominatim

from dotenv import load_dotenv

import telebot
# https://api.telegram.org/{TOKEN}/getMe
from telebot import types

from utils import content, vk, instagram, weather, parkrun, news, fucomp, search

dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

TOKEN_BOT = os.environ.get('API_BOT_TOKEN')
bot = telebot.TeleBot(TOKEN_BOT)
logger = telebot.logger
telebot.logger.setLevel(logging.WARNING)  # Outputs debug messages to console.


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, content.start_message, disable_notification=True)


@bot.message_handler(commands=['about', '–æ–±–æ—Ç–µ'])
@bot.message_handler(regexp=r'(?i)^–±–æ—Ç\b(?=.*–æ —Å–µ–±–µ)', content_types=['text'])
def about(message):
    bot.send_message(message.chat.id, content.about_message,
                     disable_notification=True, parse_mode='html', disable_web_page_preview=True)


@bot.message_handler(commands=['admin', '–∞–¥–º–∏–Ω'])
@bot.message_handler(func=lambda message: fucomp.bot_compare(message.text, fucomp.phrases_admin))
def admin(message):
    if message.chat.type == "private":  # private chat message
        bot.send_message(message.chat.id, '–ó–¥–µ—Å—å –Ω–µ—Ç –∞–¥–º–∏–Ω–æ–≤, –º—ã –≤—Å–µ —Ä–∞–≤–Ω—ã.', parse_mode=None)
    else:
        admin = random.choice(bot.get_chat_administrators(message.chat.id)).user.to_dict()
        about_admin = f"\n–ê–¥–º–∏–Ω @{admin['username']} - {admin['first_name']}  {admin['last_name']}"
        bot.send_message(message.chat.id, random.choice(content.phrases_about_admin) + about_admin, parse_mode=None)


@bot.message_handler(commands=['social', '—Å–æ—Ü—Å–µ—Ç–∏'])
@bot.message_handler(func=lambda message: fucomp.bot_compare(message.text, fucomp.phrases_social))
def social(message):
    bot.send_message(message.chat.id, content.about_social,
                     parse_mode='MarkdownV2', disable_web_page_preview=True, disable_notification=True)


@bot.message_handler(commands=['schedule', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'])
@bot.message_handler(func=lambda message: fucomp.bot_compare(message.text, fucomp.phrases_schedule))
def schedule(message):
    bot.send_message(message.chat.id, content.about_training,
                     parse_mode='MarkdownV2', disable_web_page_preview=True, disable_notification=True)


@bot.message_handler(commands=['help', '–ø–æ–º–æ—â—å', '–∫–æ–º–∞–Ω–¥—ã', '—Å–ø—Ä–∞–≤–∫–∞'])
def commands(message):
    bot.send_message(message.chat.id, """–Ø –ø–æ–Ω–∏–º–∞—é —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
    üìÜ /schedule, /—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    üì± /social, /—Å–æ—Ü—Å–µ—Ç–∏ - Wake&Run –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö
    üë§ /admin, /–∞–¥–º–∏–Ω - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞
    ü§ñ /about, /–æ–±–æ—Ç–µ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    ‚ùì /help, /–ø–æ–º–æ—â—å, /—Å–ø—Ä–∞–≤–∫–∞, /–∫–æ–º–∞–Ω–¥—ã - –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    –ï—Å—Ç—å inline —Ä–µ–∂–∏–º –∑–∞–ø—Ä–æ—Å–æ–≤.
    –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —Å–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å.""", disable_notification=True)


@bot.message_handler(regexp=r'(?i)–±–æ—Ç,? (?:–ø–æ–∫–∞–∂–∏ )?(–ø–æ–≥–æ–¥\w|–≤–æ–∑–¥—É—Ö)( \w+,?){1,3}$')
def ask_weather(message):
    match = re.search(r'–±–æ—Ç,? (?:–ø–æ–∫–∞–∂–∏ )?(–ø–æ–≥–æ–¥\w|–≤–æ–∑–¥—É—Ö) ([\w, ]+)', message.text, re.I)
    if match:
        place = re.sub(r' –≤\b', '', match.group(2).strip())
        app = Nominatim(user_agent="wr-tg-bot")
        try:
            location = app.geocode(place).raw
        except AttributeError:
            return bot.reply_to(message, '–ï—Å—Ç—å —Ç–∞–∫–æ–π –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç? ...–Ω–µ –∑–Ω–∞—é. –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '
                                         '"–ë–æ—Ç, –ø–æ–≥–æ–¥–∞ –ì–æ—Ä–æ–¥" –∏–ª–∏ "–ë–æ—Ç, –≤–æ–∑–¥—É—Ö –ù–∞–∑–≤–∞–Ω–∏–µ –û–±–ª–∞—Å—Ç—å".')
        if match.group(1).startswith('–ø–æ–≥–æ–¥'):
            bot.send_chat_action(message.chat.id, 'typing')
            bot.send_message(message.chat.id, weather.get_weather(place, location['lat'], location['lon']))
        else:
            bot.send_chat_action(message.chat.id, 'typing')
            place_par = weather.get_place_accu_params(location['lat'], location['lon'])
            bot.send_message(message.chat.id, f'{place}: ' + weather.get_air_accu(*place_par)[1])


@bot.inline_handler(lambda query: '–ø–æ–≥–æ–¥–∞' in query.query)
def query_weather(inline_query):
    try:
        places_weather = [types.InlineQueryResultArticle(
            f'{k}', k, description='–ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å',
            input_message_content=types.InputTextMessageContent(weather.get_weather(k, v.lat, v.lon)))
            for k, v in content.places.items()]
        bot.answer_inline_query(inline_query.id, places_weather, cache_time=3000)
    except Exception as e:
        print(e)


@bot.inline_handler(lambda query: '–≤–æ–∑–¥—É—Ö' in query.query)
def query_air(inline_query):
    try:
        places_air = [types.InlineQueryResultArticle(
            f'{k}', k, description='–∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞',
            input_message_content=types.InputTextMessageContent(weather.get_air_quality(k, v.lat, v.lon)[1]))
            for k, v in content.places.items()]
        bot.answer_inline_query(inline_query.id, places_air, cache_time=3000)
    except Exception as e:
        print(e)


@bot.inline_handler(lambda query: '–ø–∞—Ä–∫—Ä–∞–Ω' in query.query or 'parkrun' in query.query)
def query_parkrun(inline_query):
    try:
        m1 = types.InlineQueryResultArticle(
            f'{1}', '–ì–¥–µ –±–µ–≥–∞–ª–∏ –Ω–∞—à–∏ –æ–¥–Ω–æ–∫–ª—É–±–Ω–∏–∫–∏?', description='–ø–µ—Ä–µ—á–µ–Ω—å –ø–∞—Ä–∫—Ä–∞–Ω–æ–≤',
            input_message_content=types.InputTextMessageContent(parkrun.get_participants(),
                                                                parse_mode='Markdown', disable_web_page_preview=True))
        m2 = types.InlineQueryResultArticle(
            f'{2}', '–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª—É–± –≤ parkrun?', description='—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª—É–± Wake&Run',
            input_message_content=types.InputTextMessageContent(parkrun.get_club(),
                                                                parse_mode='Markdown', disable_web_page_preview=True))
        bot.answer_inline_query(inline_query.id, [m2, m1], cache_time=100000)
    except Exception as e:
        print(e)


@bot.inline_handler(lambda query: re.search(r'—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω|—Å—Ç–∞—Ä—Ç|–∑–∞–±–µ–≥', query.query))
def query_competitions(inline_query):
    try:
        date = time.gmtime(time.time())
        month, year = date.tm_mon, date.tm_year
        competitions = news.get_competitions(month, year)
        print(len(competitions))
        if len(competitions) < 10:
            if month == 12:
                month = 1
                year += 1
            else:
                month += 1
            competitions += news.get_competitions(month, year)
        queries = []
        for i, comp in enumerate(competitions, 1):
            queries.append(types.InlineQueryResultArticle(
                str(i), comp[0], description=comp[1],
                input_message_content=types.InputTextMessageContent(comp[2], parse_mode='html')))
        bot.answer_inline_query(inline_query.id, queries, cache_time=600000)
    except Exception as e:
        print(e)


@bot.message_handler(regexp=r'(?i)–±–æ—Ç,? (–ø–∞—Ä–∫—Ä–∞–Ω|parkrun)', content_types=['text'])
def get_parkrun_picture(message):
    token = os.environ.get('VK_SERVICE_TOKEN')
    bot.send_photo(message.chat.id, vk.get_random_photo(token), disable_notification=True)


@bot.message_handler(func=lambda message: fucomp.bot_compare(message.text, fucomp.phrases_instagram))
def get_instagram_post(message):
    login = os.environ.get('IG_USERNAME')
    password = os.environ.get('IG_PASSWORD')
    user = random.choice(content.instagram_profiles)
    wait_message = bot.reply_to(message, '–°–µ–π—á–∞—Å —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–∞–π–¥—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...', disable_notification=True)
    ig_post = instagram.get_last_post(login, password, user)
    bot.send_photo(message.chat.id, *ig_post, disable_notification=True)
    bot.delete_message(wait_message.chat.id, wait_message.id)


@bot.message_handler(regexp=r'(?i)^–±–æ—Ç\b', content_types=['text'])
def simple_answers(message):
    ans = []
    if '–∫–∞–∫' in message.text and re.search('\b–¥–µ–ª–∞\b|–∂–∏–∑–Ω—å|\b—Å–∞–º\b|–ø–æ–∂–∏–≤–∞–µ—à—å', message.text, re.I):
        ans = content.phrases_about_myself
    elif re.search('–ø—Ä–∏–≤–µ—Ç|hi|hello|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', message.text, re.I):
        user = message.from_user.first_name
        ans = [s.format(user) for s in content.greeting]
    elif fucomp.bot_compare(message.text, fucomp.phrases_parkrun):
        ans = content.phrases_about_parkrun

    if ans:
        bot.reply_to(message, random.choice(ans), disable_web_page_preview=True)
        return
    elif '–ø–æ–≥–æ–¥–∞' in message.text:
        ans = ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ inline –∑–∞–ø—Ä–æ—Å: –≤ —Å—Ç—Ä–æ–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–±–µ—Ä–∏—Ç–µ "@–∏–º—è–±–æ—Ç–∞ –ø–æ–≥–æ–¥–∞".'
               '–õ–∏–±–æ, –Ω–∞–±—Ä–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ, "–ë–æ—Ç, –ø–æ–≥–æ–¥–∞ –ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç", –Ω–∞–ø—Ä–∏–º–µ—Ä, "–ë–æ—Ç, –ø–æ–≥–æ–¥–∞ –ö—É–∑—å–º–∏–Ω–∫–∏ –ú–æ—Å–∫–≤–∞".']
    elif re.search(r'GRUT|–ì–†–£–¢', message.text, re.I):
        ans = content.phrases_grut
    elif re.search(r'\b–≥—Ä–µ—á–∫\B|\b–≥—Ä–µ—á–Ω–µ–≤–∞—è', message.text, re.I):
        ans = content.phrases_grechka
    else:
        ans = [search.google(message.text)]
        if not ans[0]:
            ans = content.phrases_about_running
    bot.send_message(message.chat.id, random.choice(ans), disable_web_page_preview=True, disable_notification=True)


if __name__ == '__main__':
    # print(os.environ.get('API_BOT_TOKEN'))
    # bot.remove_webhook()
    bot.polling(none_stop=True)
